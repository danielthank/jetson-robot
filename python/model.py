from __future__ import print_function
from keras.models import model_from_json, Model
from keras.layers import Input, Dense, Dropout, Activation, Flatten, merge
from keras.layers import Convolution2D, MaxPooling2D
from keras.optimizers import SGD
from keras.utils import np_utils
from keras.callbacks import ModelCheckpoint
import numpy as np
import os

MODEL_PATH = "model.json"

class DeepModel:
    def __init__(self):
        if not os.path.isfile(MODEL_PATH):
            camera_input = Input(shape=(1, 32, 32), dtype='uint8', name='camera_input')

            conv1 = Convolution2D(64, 3, 3)(camera_input)
            conv1 = Activation('relu')(conv1)

            conv2 = Convolution2D(64, 3, 3)(conv1)
            conv2 = Activation('relu')(conv2)

            conv3 = Convolution2D(64, 3, 3)(conv2)
            conv3 = Activation('relu')(conv3)

            conv3 = MaxPooling2D(pool_size=(2, 2))(conv3)
            conv3 = Dropout(0.25)(conv3)

            conv4 = Convolution2D(128, 3, 3)(conv3)
            conv4 = Activation('relu')(conv4)

            conv5 = Convolution2D(128, 3, 3)(conv4)
            conv5 = Activation('relu')(conv5)

            conv6 = Convolution2D(128, 3, 3)(conv5)
            conv6 = Activation('relu')(conv6)

            conv6 = MaxPooling2D(pool_size=(2, 2))(conv6)
            conv6 = Dropout(0.25)(conv6)
            conv6 = Flatten()(conv6)

            ir_input = Input(shape=(2,), dtype='uint8', name='ir_input')

            x = merge([conv6, ir_input], mode='concat')
            x = Dense(1024, activation='relu')(x)
            x = Dropout(0.5)(x)
            prob = Dense(5, activation='softmax')(x)
            model = Model(input=[camera_input, ir_input], output=[prob])
            open(MODEL_PATH, 'w').write(model.to_json())
        else:
            model = model_from_json(open(MODEL_PATH, "r").read())

        print(model.summary())



"""
# the data, shuffled and split between train and test sets
(X_train, y_train), (X_test, y_test) = cifar10.load_data()
print('X_train shape:', X_train.shape)
print(X_train.shape[0], 'train samples')
print(X_test.shape[0], 'test samples')

# convert class vectors to binary class matrices
Y_train = np_utils.to_categorical(y_train, nb_classes)
Y_test = np_utils.to_categorical(y_test, nb_classes)

print(model.summary())

# let's train the model using SGD + momentum (how original).
sgd = SGD(lr=0.001, decay=1e-6, momentum=0.9, nesterov=True)
model.compile(loss='categorical_crossentropy',
              optimizer=sgd,
              metrics=['accuracy'])

X_train = X_train.astype('float32')
X_test = X_test.astype('float32')
X_train /= 255
X_test /= 255

model.load_weights(weights_path)

if not data_augmentation:
    print('Not using data augmentation.')
    model.fit(X_train, Y_train,
              batch_size=batch_size,
              nb_epoch=nb_epoch,
              validation_data=(X_test, Y_test),
              shuffle=True)
else:
    print('Using real-time data augmentation.')

    # this will do preprocessing and realtime data augmentation
    datagen = ImageDataGenerator(
        featurewise_center=False,  # set input mean to 0 over the dataset
        samplewise_center=False,  # set each sample mean to 0
        featurewise_std_normalization=False,  # divide inputs by std of the dataset
        samplewise_std_normalization=False,  # divide each input by its std
        zca_whitening=False,  # apply ZCA whitening
        rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
        horizontal_flip=True,  # randomly flip images
        vertical_flip=False)  # randomly flip images

    # compute quantities required for featurewise normalization
    # (std, mean, and principal components if ZCA whitening is applied)
    datagen.fit(X_train)

    # fit the model on the batches generated by datagen.flow()
    checkpointer = ModelCheckpoint(filepath=weights_path, verbose=1, save_best_only=True)
    model.fit_generator(generator=datagen.flow(X_train, Y_train, batch_size=batch_size),
                        callbacks=[checkpointer],
                        samples_per_epoch=X_train.shape[0],
                        nb_epoch=nb_epoch,
                        validation_data=(X_test, Y_test))
"""

